// app/src/main.rs - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ JARVIS

use std::env;
use std::path::PathBuf;
use std::process;
use std::sync::atomic::{AtomicBool, Ordering};

use once_cell::sync::{Lazy, OnceCell};
use platform_dirs::AppDirs;

// –ú–æ–¥—É–ª–∏ –æ—à–∏–±–æ–∫ (–ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º)
mod error;
use error::{JarvisResult, JarvisError};

// –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
mod config;
mod log;
mod db;

// –ê—É–¥–∏–æ –∏ –≤–≤–æ–¥/–≤—ã–≤–æ–¥
mod recorder;
mod audio;

// –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
mod stt;
mod listener;

// –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–∞–Ω–¥
mod commands;
mod document_search;

pub use db::structs;
// –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
#[cfg(not(target_os = "macos"))]
mod tray;

// –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
mod app;

use commands::AssistantCommand;

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
#[macro_use]
extern crate simple_log;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
static APP_DIR: Lazy<PathBuf> = Lazy::new(|| env::current_dir().unwrap_or_else(|_| PathBuf::from(".")));
static SOUND_DIR: Lazy<PathBuf> = Lazy::new(|| APP_DIR.clone().join("sound"));
static APP_DIRS: OnceCell<AppDirs> = OnceCell::new();
static APP_CONFIG_DIR: OnceCell<PathBuf> = OnceCell::new();
static APP_LOG_DIR: OnceCell<PathBuf> = OnceCell::new();
static DB: OnceCell<db::structs::Settings> = OnceCell::new();
static COMMANDS_LIST: OnceCell<Vec<AssistantCommand>> = OnceCell::new();

// –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
static SHUTDOWN_REQUESTED: AtomicBool = AtomicBool::new(false);
static INITIALIZATION_COMPLETE: AtomicBool = AtomicBool::new(false);

fn main() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    setup_signal_handlers();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if let Err(e) = run_application() {
        error!("Application failed: {}", e);

        // –í—ã–ø–æ–ª–Ω—è–µ–º graceful shutdown
        if let Err(shutdown_error) = perform_graceful_shutdown() {
            error!("Shutdown failed: {}", shutdown_error);
        }

        process::exit(1);
    }

    info!("JARVIS completed successfully");
}

/// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
fn run_application() -> JarvisResult<()> {
    info!("üöÄ Starting JARVIS Voice Assistant v{}", config::APP_VERSION.unwrap_or("unknown"));

    // === –≠–¢–ê–ü 1: –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
    info!("üìÅ Phase 1: Basic initialization");
    initialize_configuration()?;
    initialize_logging()?;
    initialize_database()?;

    // === –≠–¢–ê–ü 2: –ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ ===
    info!("üéµ Phase 2: Audio system initialization");
    initialize_audio_system()?;

    // === –≠–¢–ê–ü 3: –ö–æ–º–∞–Ω–¥—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ===
    info!("üìã Phase 3: Commands and document search");
    initialize_commands_and_documents()?;

    // === –≠–¢–ê–ü 4: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ===
    info!("üñ•Ô∏è Phase 4: System integration");
    initialize_system_integration()?;

    // === –≠–¢–ê–ü 5: –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ ===
    info!("üéØ Phase 5: Starting main application loop");
    INITIALIZATION_COMPLETE.store(true, Ordering::SeqCst);

    run_main_loop()?;

    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
fn initialize_configuration() -> JarvisResult<()> {
    info!("Initializing configuration...");

    config::init_dirs()?;
    // config::validate_config()?; // –î–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    info!("‚úÖ Configuration initialized");
    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
fn initialize_logging() -> JarvisResult<()> {
    info!("Initializing logging system...");

    log::init_logging().map_err(|e| {
        JarvisError::ConfigError(error::ConfigError::InvalidConfiguration(
            format!("Failed to initialize logging: {}", e)
        ))
    })?;

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    info!("JARVIS Voice Assistant v{}", config::APP_VERSION.unwrap_or("unknown"));
    info!("Platform: {} {}", std::env::consts::OS, std::env::consts::ARCH);
    info!("Config directory: {}", APP_CONFIG_DIR.get().unwrap().display());
    info!("Log directory: {}", APP_LOG_DIR.get().unwrap().display());

    info!("‚úÖ Logging system initialized");
    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
fn initialize_database() -> JarvisResult<()> {
    info!("Initializing database...");

    let settings = db::init_settings()?;

    DB.set(settings).map_err(|_| {
        JarvisError::DatabaseError(error::DatabaseError::InitializationFailed(
            "Database already initialized".to_string()
        ))
    })?;

    info!("‚úÖ Database initialized");
    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã
fn initialize_audio_system() -> JarvisResult<()> {
    info!("Initializing audio system...");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ä–µ–∫–æ—Ä–¥–µ—Ä
    info!("Starting audio recorder...");
    recorder::init().map_err(|e| {
        error!("‚ùå Critical: Audio recorder initialization failed");
        e
    })?;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä
    info!("Starting audio player...");
    audio::init().map_err(|e| {
        error!("‚ùå Critical: Audio player initialization failed");
        e
    })?;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º STT
    info!("Starting Speech-to-Text...");
    stt::init().map_err(|e| {
        error!("‚ùå Critical: STT initialization failed");
        e
    })?;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º wake-word engine
    info!("Starting wake-word detection...");
    listener::init().map_err(|e| {
        error!("‚ùå Critical: Wake-word engine initialization failed");
        e
    })?;

    info!("‚úÖ Audio system initialized");
    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
fn initialize_commands_and_documents() -> JarvisResult<()> {
    info!("Initializing command system...");

    let commands = commands::parse_commands().map_err(|e| {
        JarvisError::CommandError(error::CommandError::ParseError(
            format!("Failed to parse commands: {}", e)
        ))
    })?;

    info!("Commands loaded: {} total", commands.len());

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    let command_names = commands::list(&commands);
    info!("Available commands: {:?}", command_names);

    COMMANDS_LIST.set(commands).map_err(|_| {
        JarvisError::CommandError(error::CommandError::ParseError(
            "Commands list already initialized".to_string()
        ))
    })?;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    info!("Starting document search...");
    document_search::init().map_err(|e| {
        warn!("Document search initialization failed: {}", e);
        e
    })?;

    info!("‚úÖ Commands and document search initialized");
    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
fn initialize_system_integration() -> JarvisResult<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    #[cfg(not(target_os = "macos"))]
    {
        info!("Starting system tray...");
        tray::init().map_err(|e| {
            warn!("System tray initialization failed: {}", e);
            // –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è tray
            e
        })?;
    }

    #[cfg(target_os = "macos")]
    {
        info!("System tray is not supported on macOS");
    }

    info!("‚úÖ System integration initialized");
    Ok(())
}

/// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
fn run_main_loop() -> JarvisResult<()> {
    info!("üéØ JARVIS is ready and listening!");

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∑–∞–ø—É—Å–∫–∞
    if let Ok(sounds_directory) = audio::get_sound_directory() {
        if let Err(e) = audio::play_sound(&sounds_directory.join("run.wav")) {
            warn!("Failed to play startup sound: {}", e);
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app::start().map_err(|_| {
        JarvisError::Generic("Main loop failed".to_string())
    })?;

    Ok(())
}

/// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
fn setup_signal_handlers() {
    #[cfg(unix)]
    {
        use signal_hook::{consts::SIGINT, iterator::Signals};
        use std::thread;

        if let Ok(mut signals) = Signals::new(&[SIGINT]) {
            thread::spawn(move || {
                for sig in signals.forever() {
                    match sig {
                        SIGINT => {
                            info!("üì° Received SIGINT, initiating graceful shutdown...");
                            SHUTDOWN_REQUESTED.store(true, Ordering::SeqCst);
                            break;
                        }
                        _ => unreachable!(),
                    }
                }
            });
        }
    }

    #[cfg(windows)]
    {
        use winapi::um::wincon::{SetConsoleCtrlHandler, CTRL_C_EVENT};
        use winapi::shared::minwindef::{BOOL, DWORD, TRUE, FALSE};

        unsafe extern "system" fn ctrl_handler(ctrl_type: DWORD) -> BOOL {
            match ctrl_type {
                CTRL_C_EVENT => {
                    info!("üì° Received Ctrl+C, initiating graceful shutdown...");
                    SHUTDOWN_REQUESTED.store(true, Ordering::SeqCst);
                    TRUE
                }
                _ => FALSE,
            }
        }

        unsafe {
            SetConsoleCtrlHandler(Some(ctrl_handler), TRUE);
        }
    }
}

/// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
pub fn should_shutdown() -> bool {
    SHUTDOWN_REQUESTED.load(Ordering::SeqCst)
}

/// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
pub fn is_initialization_complete() -> bool {
    INITIALIZATION_COMPLETE.load(Ordering::SeqCst)
}

/// –ó–∞–ø—Ä–æ—Å graceful shutdown
pub fn request_shutdown() {
    SHUTDOWN_REQUESTED.store(true, Ordering::SeqCst);
    info!("üõë Shutdown requested");
}

/// Graceful shutdown –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
fn perform_graceful_shutdown() -> JarvisResult<()> {
    info!("üõë Initiating graceful shutdown...");

    // –§–∞–∑–∞ 1: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
    info!("Phase 1: Stopping voice recognition...");
    if recorder::is_recording() {
        if let Err(e) = recorder::stop_recording() {
            warn!("Failed to stop recording gracefully: {}", e);
        }
    }

    // –§–∞–∑–∞ 2: –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã
    info!("Phase 2: Shutting down audio systems...");
    if let Err(e) = recorder::shutdown() {
        warn!("Failed to shutdown recorder gracefully: {}", e);
    }

    if let Err(e) = audio::shutdown() {
        warn!("Failed to shutdown audio gracefully: {}", e);
    }

    // –§–∞–∑–∞ 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    info!("Phase 3: Saving database state...");
    if let Err(e) = db::save_state() {
        warn!("Failed to save database state: {}", e);
    }

    // –§–∞–∑–∞ 4: –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    info!("Phase 4: Shutting down system integration...");
    #[cfg(not(target_os = "macos"))]
    {
        if let Err(e) = tray::shutdown() {
            warn!("Failed to shutdown tray gracefully: {}", e);
        }
    }

    info!("‚úÖ Graceful shutdown completed");
    Ok(())
}

/// –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
pub fn emergency_shutdown(error: &JarvisError) -> ! {
    error!("üí• CRITICAL ERROR: {}", error);
    error!("üö® Performing emergency shutdown...");

    // –ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    let _ = db::emergency_save();

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    let _ = recorder::shutdown();
    let _ = audio::shutdown();

    error!("üö® Emergency shutdown completed");
    process::exit(1);
}

/// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
pub fn get_app_stats() -> serde_json::Value {
    serde_json::json!({
        "version": config::APP_VERSION.unwrap_or("unknown"),
        "platform": format!("{} {}", std::env::consts::OS, std::env::consts::ARCH),
        "initialization_complete": is_initialization_complete(),
        "components": {
            "recorder_initialized": recorder::is_initialized(),
            "recorder_recording": recorder::is_recording(),
            "audio_initialized": audio::is_initialized(),
        },
        "commands": {
            "total_commands": COMMANDS_LIST.get().map(|c| c.len()).unwrap_or(0),
        }
    })
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_shutdown_flag() {
        SHUTDOWN_REQUESTED.store(false, Ordering::SeqCst);
        assert!(!should_shutdown());

        request_shutdown();
        assert!(should_shutdown());
    }

    #[test]
    fn test_initialization_flag() {
        INITIALIZATION_COMPLETE.store(false, Ordering::SeqCst);
        assert!(!is_initialization_complete());

        INITIALIZATION_COMPLETE.store(true, Ordering::SeqCst);
        assert!(is_initialization_complete());
    }

    #[test]
    fn test_app_stats() {
        let stats = get_app_stats();
        assert!(stats.get("version").is_some());
        assert!(stats.get("platform").is_some());
        assert!(stats.get("components").is_some());
    }
}