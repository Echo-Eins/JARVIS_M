// src-tauri/src/main.rs - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

use std::env;
use std::process;
use std::sync::atomic::{AtomicBool, Ordering};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–∑ –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
use jarvis::{
    JarvisResult, JarvisError,
    config, error, db, audio, stt, listener,
    commands, app, structs
};

#[cfg(feature = "document-search")]
use jarvis::document_search;

#[cfg(all(not(target_os = "macos"), feature = "system-tray"))]
use jarvis::tray;

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
#[macro_use]
extern crate log;

// –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
static SHUTDOWN_REQUESTED: AtomicBool = AtomicBool::new(false);
static INITIALIZATION_COMPLETE: AtomicBool = AtomicBool::new(false);

fn main() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    setup_signal_handlers();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if let Err(e) = run_application() {
        error!("Application failed: {}", e);

        // –í—ã–ø–æ–ª–Ω—è–µ–º graceful shutdown
        if let Err(shutdown_error) = perform_graceful_shutdown() {
            error!("Shutdown failed: {}", shutdown_error);
        }

        process::exit(1);
    }

    info!("JARVIS completed successfully");
}

/// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
fn run_application() -> JarvisResult<()> {
    info!("üöÄ Starting JARVIS Voice Assistant v{}", jarvis::VERSION);

    // === –≠–¢–ê–ü 1: –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
    info!("üìÅ Phase 1: Basic initialization");
    initialize_configuration()?;
    initialize_logging()?;
    initialize_database()?;

    // === –≠–¢–ê–ü 2: –ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ ===
    info!("üéµ Phase 2: Audio system initialization");
    initialize_audio_system()?;

    // === –≠–¢–ê–ü 3: –ö–æ–º–∞–Ω–¥—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ===
    info!("üìã Phase 3: Commands and document search");
    initialize_commands_and_documents()?;

    // === –≠–¢–ê–ü 4: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ===
    info!("üñ•Ô∏è Phase 4: System integration");
    initialize_system_integration()?;

    // === –≠–¢–ê–ü 5: –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
    info!("üéØ Phase 5: Starting main loop");

    // –û—Ç–º–µ—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
    INITIALIZATION_COMPLETE.store(true, Ordering::Relaxed);

    run_main_loop()?;

    info!("‚úÖ All phases completed successfully");
    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
fn initialize_configuration() -> JarvisResult<()> {
    info!("Initializing configuration...");
    config::init_dirs()?;
    config::validate_configuration()?;
    info!("‚úÖ Configuration initialized");
    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
fn initialize_logging() -> JarvisResult<()> {
    info!("Initializing logging...");

    if let Ok(log_path) = config::get_log_file_path() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        info!("Log file: {}", log_path.display());
    }

    info!("‚úÖ Logging initialized");
    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
fn initialize_database() -> JarvisResult<()> {
    info!("Initializing database...");

    let _settings = db::init_settings()?;

    info!("‚úÖ Database initialized");
    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã
fn initialize_audio_system() -> JarvisResult<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä
    info!("Starting audio player...");
    audio::init().map_err(|e| {
        error!("‚ùå Critical: Audio player initialization failed");
        e
    })?;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º STT
    info!("Starting Speech-to-Text...");
    stt::init().map_err(|e| {
        error!("‚ùå Critical: STT initialization failed");
        e
    })?;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º wake-word engine
    info!("Starting wake-word detection...");
    listener::init().map_err(|e| {
        error!("‚ùå Critical: Wake-word engine initialization failed");
        e
    })?;

    info!("‚úÖ Audio system initialized");
    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
fn initialize_commands_and_documents() -> JarvisResult<()> {
    info!("Initializing command system...");

    let _commands = commands::parse_commands().map_err(|e| {
        JarvisError::CommandError(error::CommandError::ParseError(
            format!("Failed to parse commands: {}", e)
        ))
    })?;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    #[cfg(feature = "document-search")]
    {
        info!("Starting document search...");
        document_search::init().map_err(|e| {
            warn!("Document search initialization failed: {}", e);
            e
        })?;
    }

    info!("‚úÖ Commands and document search initialized");
    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
fn initialize_system_integration() -> JarvisResult<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    #[cfg(all(not(target_os = "macos"), feature = "system-tray"))]
    {
        info!("Starting system tray...");
        tray::init().map_err(|e| {
            warn!("System tray initialization failed: {}", e);
            // –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è tray
            e
        })?;
    }

    #[cfg(target_os = "macos")]
    {
        info!("System tray is not supported on macOS");
    }

    info!("‚úÖ System integration initialized");
    Ok(())
}

/// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
fn run_main_loop() -> JarvisResult<()> {
    info!("üéØ JARVIS is ready and listening!");

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∑–∞–ø—É—Å–∫–∞
    if let Ok(sounds_directory) = audio::get_sound_directory() {
        if let Err(e) = audio::play_sound(&sounds_directory.join("run.wav")) {
            warn!("Failed to play startup sound: {}", e);
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app::start().map_err(|_| {
        JarvisError::Generic("Main loop failed".to_string())
    })?;

    Ok(())
}

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
fn setup_signal_handlers() {
    #[cfg(unix)]
    {
        use signal_hook::{consts::SIGINT, consts::SIGTERM, iterator::Signals};
        use std::thread;

        let mut signals = Signals::new(&[SIGINT, SIGTERM]).unwrap();
        thread::spawn(move || {
            for sig in signals.forever() {
                match sig {
                    SIGINT | SIGTERM => {
                        info!("Received shutdown signal: {}", sig);
                        request_shutdown();
                        break;
                    }
                    _ => {}
                }
            }
        });
    }

    #[cfg(windows)]
    {
        use winapi::um::consoleapi::SetConsoleCtrlHandler;
        use winapi::um::wincon::{CTRL_C_EVENT, CTRL_CLOSE_EVENT};
        use winapi::shared::minwindef::{BOOL, DWORD, TRUE};

        unsafe extern "system" fn ctrl_handler(ctrl_type: DWORD) -> BOOL {
            match ctrl_type {
                CTRL_C_EVENT | CTRL_CLOSE_EVENT => {
                    info!("Received Windows shutdown signal: {}", ctrl_type);
                    request_shutdown();
                    TRUE
                }
                _ => TRUE,
            }
        }

        unsafe {
            SetConsoleCtrlHandler(Some(ctrl_handler), TRUE);
        }
    }
}

/// –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
pub fn request_shutdown() {
    info!("Shutdown requested");
    SHUTDOWN_REQUESTED.store(true, Ordering::Relaxed);
}

/// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
pub fn should_shutdown() -> bool {
    SHUTDOWN_REQUESTED.load(Ordering::Relaxed)
}

/// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ graceful shutdown
fn perform_graceful_shutdown() -> JarvisResult<()> {
    info!("Performing graceful shutdown...");

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    #[cfg(all(not(target_os = "macos"), feature = "system-tray"))]
    {
        if let Err(e) = tray::shutdown() {
            warn!("Tray shutdown error: {}", e);
        }
    }

    // –ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞
    if let Err(e) = listener::shutdown() {
        warn!("Listener shutdown error: {}", e);
    }

    if let Err(e) = stt::shutdown() {
        warn!("STT shutdown error: {}", e);
    }

    if let Err(e) = audio::shutdown() {
        warn!("Audio shutdown error: {}", e);
    }

    info!("‚úÖ Graceful shutdown completed");
    Ok(())
}