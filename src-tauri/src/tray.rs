// app/src/tray.rs - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è

use std::sync::{Arc, Mutex};
use std::thread;
use std::time::Duration;

use tray_icon::{
    TrayIcon, TrayIconBuilder, TrayIconEvent,
    menu::{Menu, MenuItem, MenuEvent, PredefinedMenuItem}
};
use winit::event_loop::{EventLoop, ControlFlow};
use winit::event::{Event, WindowEvent};
use image::load_from_memory;

use crate::error::{JarvisResult, JarvisError};
use crate::config;
use crate::{recorder, listener, tts, should_shutdown};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ—è
struct TrayState {
    is_listening: bool,
    is_speaking: bool,
    last_command: Option<String>,
    microphone_count: usize,
}

impl Default for TrayState {
    fn default() -> Self {
        Self {
            is_listening: false,
            is_speaking: false,
            last_command: None,
            microphone_count: 0,
        }
    }
}

static TRAY_STATE: Mutex<TrayState> = Mutex::new(TrayState {
    is_listening: false,
    is_speaking: false,
    last_command: None,
    microphone_count: 0,
});

// ID –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
const MENU_TOGGLE_LISTENING: &str = "toggle_listening";
const MENU_OPEN_SETTINGS: &str = "open_settings";
const MENU_SHOW_STATUS: &str = "show_status";
const MENU_RELOAD_CONFIG: &str = "reload_config";
const MENU_QUIT: &str = "quit";

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è
pub fn init() -> JarvisResult<()> {
    info!("Initializing system tray...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç—Ä–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ
    if !tray_icon::TrayIcon::is_supported() {
        warn!("System tray is not supported on this platform");
        return Ok(()); // –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread::spawn(|| {
        if let Err(e) = run_tray() {
            error!("Tray error: {}", e);
        }
    });

    info!("System tray initialized successfully");
    Ok(())
}

/// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç—Ä–µ—è
fn run_tray() -> JarvisResult<()> {
    let event_loop = EventLoop::new();

    // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è
    let icon = load_tray_icon()?;

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
    let menu = create_tray_menu()?;

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π
    let _tray_icon = TrayIconBuilder::new()
        .with_menu(Box::new(menu))
        .with_tooltip("JARVIS Voice Assistant")
        .with_icon(icon)
        .build()
        .map_err(|e| JarvisError::Generic(format!("Failed to create tray icon: {}", e)))?;

    info!("Tray icon created successfully");

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –º–µ–Ω—é
    let menu_channel = MenuEvent::receiver();
    let tray_channel = TrayIconEvent::receiver();

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    event_loop.run(move |event, _, control_flow| {
        *control_flow = ControlFlow::WaitUntil(
            std::time::Instant::now() + Duration::from_millis(100)
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if should_shutdown() {
            *control_flow = ControlFlow::Exit;
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ—è
        update_tray_state();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º–µ–Ω—é
        if let Ok(event) = menu_channel.try_recv() {
            if let Err(e) = handle_menu_event(event) {
                error!("Menu event error: {}", e);
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ç—Ä–µ—è
        if let Ok(event) = tray_channel.try_recv() {
            if let Err(e) = handle_tray_event(event) {
                error!("Tray event error: {}", e);
            }
        }

        match event {
            Event::WindowEvent {
                event: WindowEvent::CloseRequested,
                ..
            } => {
                *control_flow = ControlFlow::Exit;
            }
            _ => {}
        }
    });
}

/// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è
fn load_tray_icon() -> JarvisResult<tray_icon::Icon> {
    // –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞ (base64 –∏–ª–∏ –±–∞–π—Ç—ã)
    let icon_bytes = include_bytes!("../assets/icons/tray.png"); // –ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ

    let image = load_from_memory(icon_bytes)
        .map_err(|e| JarvisError::Generic(format!("Failed to load tray icon: {}", e)))?;

    let rgba = image.to_rgba8();
    let (width, height) = rgba.dimensions();

    tray_icon::Icon::from_rgba(rgba.into_raw(), width, height)
        .map_err(|e| JarvisError::Generic(format!("Failed to create icon: {}", e)))
}

/// –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è
fn create_tray_menu() -> JarvisResult<Menu> {
    let menu = Menu::new();

    // –°—Ç–∞—Ç—É—Å
    let status_item = MenuItem::new("JARVIS - –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", true, None);
    menu.append(&status_item)
        .map_err(|e| JarvisError::Generic(format!("Failed to add status item: {}", e)))?;

    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    menu.append(&PredefinedMenuItem::separator())
        .map_err(|e| JarvisError::Generic(format!("Failed to add separator: {}", e)))?;

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    let listening_item = MenuItem::new("‚ñ∂ –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ", true, Some(MENU_TOGGLE_LISTENING.to_string()));
    menu.append(&listening_item)
        .map_err(|e| JarvisError::Generic(format!("Failed to add listening item: {}", e)))?;

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
    let status_detail_item = MenuItem::new("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å", true, Some(MENU_SHOW_STATUS.to_string()));
    menu.append(&status_detail_item)
        .map_err(|e| JarvisError::Generic(format!("Failed to add status detail item: {}", e)))?;

    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    menu.append(&PredefinedMenuItem::separator())
        .map_err(|e| JarvisError::Generic(format!("Failed to add separator: {}", e)))?;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    let settings_item = MenuItem::new("‚öô –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", true, Some(MENU_OPEN_SETTINGS.to_string()));
    menu.append(&settings_item)
        .map_err(|e| JarvisError::Generic(format!("Failed to add settings item: {}", e)))?;

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let reload_item = MenuItem::new("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", true, Some(MENU_RELOAD_CONFIG.to_string()));
    menu.append(&reload_item)
        .map_err(|e| JarvisError::Generic(format!("Failed to add reload item: {}", e)))?;

    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    menu.append(&PredefinedMenuItem::separator())
        .map_err(|e| JarvisError::Generic(format!("Failed to add separator: {}", e)))?;

    // –í—ã—Ö–æ–¥
    let quit_item = MenuItem::new("‚ùå –í—ã–π—Ç–∏", true, Some(MENU_QUIT.to_string()));
    menu.append(&quit_item)
        .map_err(|e| JarvisError::Generic(format!("Failed to add quit item: {}", e)))?;

    Ok(menu)
}

/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–µ—è
fn update_tray_state() {
    let mut state = TRAY_STATE.lock().unwrap();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    state.is_listening = recorder::is_recording();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
    state.is_speaking = tts::is_speaking();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤
    if let Ok(devices) = recorder::get_available_devices() {
        state.microphone_count = devices.len();
    }
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–µ–Ω—é
fn handle_menu_event(event: MenuEvent) -> JarvisResult<()> {
    if let Some(id) = event.id.0.as_ref() {
        match id.as_str() {
            MENU_TOGGLE_LISTENING => toggle_listening()?,
            MENU_OPEN_SETTINGS => open_settings()?,
            MENU_SHOW_STATUS => show_status()?,
            MENU_RELOAD_CONFIG => reload_config()?,
            MENU_QUIT => quit_application()?,
            _ => {}
        }
    }
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ç—Ä–µ—è (–∫–ª–∏–∫–∏ –ø–æ –∏–∫–æ–Ω–∫–µ)
fn handle_tray_event(event: TrayIconEvent) -> JarvisResult<()> {
    match event {
        TrayIconEvent::Click {
            button: tray_icon::ClickType::Left,
            ..
        } => {
            // –õ–µ–≤—ã–π –∫–ª–∏–∫ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
            toggle_listening()?;
        }
        TrayIconEvent::Click {
            button: tray_icon::ClickType::Right,
            ..
        } => {
            // –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        }
        TrayIconEvent::DoubleClick { .. } => {
            // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ - –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            open_settings()?;
        }
        _ => {}
    }
    Ok(())
}

/// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
fn toggle_listening() -> JarvisResult<()> {
    let state = TRAY_STATE.lock().unwrap();

    if state.is_listening {
        info!("Stopping listening via tray");
        recorder::stop_recording()?;
        show_notification("JARVIS", "–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")?;
    } else {
        info!("Starting listening via tray");
        recorder::start_recording()?;
        show_notification("JARVIS", "–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å")?;
    }

    Ok(())
}

/// –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
fn open_settings() -> JarvisResult<()> {
    info!("Opening settings via tray");

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ Tauri
    #[cfg(target_os = "windows")]
    {
        std::process::Command::new("cmd")
            .args(&["/C", "start", "http://localhost:1420/settings"]) // –ü–æ—Ä—Ç Tauri dev —Å–µ—Ä–≤–µ—Ä–∞
            .spawn()
            .map_err(|e| JarvisError::Generic(format!("Failed to open settings: {}", e)))?;
    }

    #[cfg(target_os = "linux")]
    {
        std::process::Command::new("xdg-open")
            .arg("http://localhost:1420/settings")
            .spawn()
            .map_err(|e| JarvisError::Generic(format!("Failed to open settings: {}", e)))?;
    }

    Ok(())
}

/// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
fn show_status() -> JarvisResult<()> {
    let state = TRAY_STATE.lock().unwrap();

    let listening_status = if state.is_listening { "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" } else { "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ" };
    let speaking_status = if state.is_speaking { "üó£ –ì–æ–≤–æ—Ä–∏—Ç" } else { "üîá –ú–æ–ª—á–∏—Ç" };

    let status_message = format!(
        "JARVIS –°—Ç–∞—Ç—É—Å:\n\n\
         –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ: {}\n\
         –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏: {}\n\
         –ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã: {} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n\
         –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞: {}",
        listening_status,
        speaking_status,
        state.microphone_count,
        state.last_command.as_deref().unwrap_or("–ù–µ—Ç")
    );

    show_notification("JARVIS - –°—Ç–∞—Ç—É—Å", &status_message)?;

    Ok(())
}

/// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
fn reload_config() -> JarvisResult<()> {
    info!("Reloading configuration via tray");

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

    show_notification("JARVIS", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")?;
    Ok(())
}

/// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
fn quit_application() -> JarvisResult<()> {
    info!("Quit requested via tray");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    crate::request_shutdown();

    Ok(())
}

/// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
fn show_notification(title: &str, message: &str) -> JarvisResult<()> {
    #[cfg(target_os = "windows")]
    {
        // Windows Toast notification
        let ps_command = format!(
            "[Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] | Out-Null; \
             [Windows.UI.Notifications.ToastNotification, Windows.UI.Notifications, ContentType = WindowsRuntime] | Out-Null; \
             [Windows.Data.Xml.Dom.XmlDocument, Windows.Data.Xml.Dom.XmlDocument, ContentType = WindowsRuntime] | Out-Null; \
             $APP_ID = 'JARVIS Voice Assistant'; \
             $template = @'
             <toast>
                 <visual>
                     <binding template=\"ToastText02\">
                         <text id=\"1\">{}</text>
                         <text id=\"2\">{}</text>
                     </binding>
                 </visual>
             </toast>
             '@; \
             $xml = New-Object Windows.Data.Xml.Dom.XmlDocument; \
             $xml.LoadXml($template); \
             $toast = New-Object Windows.UI.Notifications.ToastNotification $xml; \
             [Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier($APP_ID).Show($toast);",
            title.replace("\"", "\\\""),
            message.replace("\"", "\\\"")
        );

        std::process::Command::new("powershell")
            .args(&["-Command", &ps_command])
            .output()
            .map_err(|e| JarvisError::Generic(format!("Failed to show notification: {}", e)))?;
    }

    #[cfg(target_os = "linux")]
    {
        // Linux notification —á–µ—Ä–µ–∑ notify-send
        std::process::Command::new("notify-send")
            .args(&[title, message, "-i", "info"])
            .output()
            .map_err(|e| JarvisError::Generic(format!("Failed to show notification: {}", e)))?;
    }

    Ok(())
}

/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
pub fn update_tray_icon(listening: bool) -> JarvisResult<()> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–µ–ª–µ–Ω–∞—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, —Å–µ—Ä–∞—è –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ

    if listening {
        info!("Tray icon: Listening mode");
    } else {
        info!("Tray icon: Idle mode");
    }

    Ok(())
}

/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç—Ä–µ—è
pub fn update_tray_tooltip(status: &str) -> JarvisResult<()> {
    info!("Tray tooltip updated: {}", status);
    Ok(())
}

/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è
pub fn update_tray_menu() -> JarvisResult<()> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é
    info!("Tray menu updated");
    Ok(())
}

/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
pub fn set_last_command(command: &str) {
    let mut state = TRAY_STATE.lock().unwrap();
    state.last_command = Some(command.to_string());
    info!("Last command updated in tray: {}", command);
}

/// Graceful shutdown —Ç—Ä–µ—è
pub fn shutdown() -> JarvisResult<()> {
    info!("Shutting down system tray...");

    // –¢—Ä–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏

    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_tray_state_default() {
        let state = TrayState::default();
        assert!(!state.is_listening);
        assert!(!state.is_speaking);
        assert!(state.last_command.is_none());
        assert_eq!(state.microphone_count, 0);
    }
}